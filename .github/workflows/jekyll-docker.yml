<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Driver/Admin Prototype</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Apply Inter font globally */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Custom style for checked-in state */
        .checked-in {
            background-color: #d1fae5; /* Tailwind green-100 */
            border-left: 4px solid #10b981; /* Tailwind green-500 */
        }
        /* Style for the Undo button */
        .undo-button {
             background-color: #f59e0b; /* Tailwind amber-500 */
        }
        .undo-button:hover {
             background-color: #d97706; /* Tailwind amber-600 */
        }
        /* Simple Modal Style */
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 10;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto; /* Adjusted margin for potentially taller modal */
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        /* Active tab style */
        .tab-active {
            border-bottom: 2px solid #4f46e5; /* Indigo-600 */
            color: #4f46e5;
            font-weight: 600;
        }
        /* Feedback message style */
        .feedback-message {
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
            font-size: 0.875rem;
        }
        .feedback-success {
            background-color: #d1fae5; /* green-100 */
            color: #065f46; /* green-800 */
            border: 1px solid #6ee7b7; /* green-300 */
        }
         .feedback-error {
            background-color: #fee2e2; /* red-100 */
            color: #991b1b; /* red-800 */
            border: 1px solid #fca5a5; /* red-300 */
        }
        /* Utility class to hide elements */
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-100 p-4 md:p-8">

    <div class="max-w-4xl mx-auto bg-white rounded-lg shadow-md p-6">

        <div class="mb-6 border-b border-gray-200">
            <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                <button id="tab-driver" onclick="switchView('driver')" class="tab-active whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" aria-current="page">
                    Driver Check-in
                </button>
                <button id="tab-admin" onclick="switchView('admin')" class="text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Admin Dashboard
                </button>
            </nav>
        </div>

        <div id="driver-view">
             <h1 class="text-2xl font-bold text-gray-800 mb-6 text-center">Driver Check-in Portal</h1>
            <div class="mb-6">
                <label for="bus-select" class="block text-sm font-medium text-gray-700 mb-2">Select Bus:</label>
                <select id="bus-select" class="block w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </select>
            </div>
            <div class="mb-4">
                <h2 class="text-lg font-semibold text-gray-700 mb-3">Passenger List</h2>
                <div id="passenger-list" class="space-y-3">
                    <p class="text-gray-500 text-center">Select a bus to see the passenger list.</p>
                </div>
            </div>
            <div class="mt-6 p-4 bg-gray-50 rounded-md border border-gray-200">
                <h3 class="text-md font-semibold text-gray-700 mb-2">Summary</h3>
                <p class="text-sm text-gray-600">Total Passengers: <span id="total-passengers" class="font-medium">0</span></p>
                <p class="text-sm text-green-600">Checked In: <span id="checked-in-count" class="font-medium">0</span></p>
                <p class="text-sm text-red-600">Pending: <span id="pending-count" class="font-medium">0</span></p>
            </div>
        </div>

        <div id="admin-view" class="hidden">
            <h1 class="text-2xl font-bold text-gray-800 mb-6 text-center">Admin Dashboard</h1>

            <div class="mb-8">
                 <h2 class="text-lg font-semibold text-gray-700 mb-3">Manage Buses</h2>
                 <div class="overflow-x-auto">
                     <table class="min-w-full divide-y divide-gray-200">
                         <thead class="bg-gray-50">
                             <tr>
                                 <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                 <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Identifier/Route</th>
                                 <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Capacity</th>
                                 <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                             </tr>
                         </thead>
                         <tbody id="admin-bus-table-body" class="bg-white divide-y divide-gray-200">
                             </tbody>
                     </table>
                 </div>
            </div>

            <div class="mb-8">
                <div class="flex justify-between items-center mb-3">
                    <h2 class="text-lg font-semibold text-gray-700">Manage Passengers</h2>
                     <button id="toggle-bulk-add-btn" onclick="toggleBulkAddPanel()" class="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Show Bulk Add
                    </button>
                </div>

                 <div id="bulk-add-panel" class="hidden mb-4 border border-gray-200 p-4 rounded-md bg-gray-50">
                    <h3 class="text-md font-semibold text-gray-700 mb-3">Bulk Add Passengers Form</h3>
                    <p class="text-sm text-gray-600 mb-2">
                        Paste passenger list below. Each line should be one passenger in the format: <br>
                        <code class="text-xs bg-white p-1 rounded border border-gray-300">Name,Gender,MobileNumber,AssignedBusID</code>
                    </p>
                    <p class="text-xs text-gray-500 mb-3">
                        Example: <code class="text-xs bg-white p-1 rounded border border-gray-300">John Doe,Male,555-1234,2</code>
                    </p>
                    <textarea id="bulk-passenger-list" rows="6" class="block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Paste list here..."></textarea>
                    <button id="import-list-button" onclick="handleBulkAddPassengers()" class="mt-3 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Import List
                    </button>
                    <div id="bulk-add-feedback" class="mt-3"></div>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                         <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gender</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mobile</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assigned Bus ID</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="admin-passenger-table-body" class="bg-white divide-y divide-gray-200">
                            </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeEditModal()">&times;</span>
            <h3 id="modal-title" class="text-lg font-medium leading-6 text-gray-900 mb-4">Edit Item</h3>
            <form id="editForm">
                <input type="hidden" id="edit-item-id">
                <input type="hidden" id="edit-item-type">
                <div id="edit-fields" class="space-y-4">
                    </div>
                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 text-sm">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 text-sm">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // --- Mock Data ---
        let buses = [
            { id: 1, identifier: "BUS-A01 - Route 5", capacity: 50 },
            { id: 2, identifier: "BUS-B07 - Route 12", capacity: 45 },
            { id: 3, identifier: "BUS-C15 - Special Event", capacity: 60 }
        ];
        let passengers = [
             { id: 101, name: "Alice Johnson", gender: "Female", mobileNumber: "555-0101", status: "pending", assignedBusId: 1 },
            { id: 102, name: "Bob Williams", gender: "Male", mobileNumber: "555-0102", status: "pending", assignedBusId: 1 },
            { id: 103, name: "Charlie Brown", gender: "Male", mobileNumber: "555-0103", status: "checked-in", assignedBusId: 1 },
            { id: 104, name: "Diana Davis", gender: "Female", mobileNumber: "555-0104", status: "pending", assignedBusId: 1 },
            { id: 201, name: "Ethan Garcia", gender: "Male", mobileNumber: "555-0201", status: "pending", assignedBusId: 2 },
            { id: 202, name: "Fiona Miller", gender: "Female", mobileNumber: "555-0202", status: "pending", assignedBusId: 2 },
            { id: 301, name: "George Rodriguez", gender: "Male", mobileNumber: "555-0301", status: "pending", assignedBusId: 3 },
            { id: 302, name: "Hannah Smith", gender: "Female", mobileNumber: "555-0302", status: "pending", assignedBusId: 3 },
            { id: 303, name: "Ian Martinez", gender: "Non-binary", mobileNumber: "555-0303", status: "pending", assignedBusId: 3 }
        ];

        // --- DOM Elements ---
        const busSelect = document.getElementById('bus-select');
        const passengerListDiv = document.getElementById('passenger-list');
        const totalPassengersSpan = document.getElementById('total-passengers');
        const checkedInCountSpan = document.getElementById('checked-in-count');
        const pendingCountSpan = document.getElementById('pending-count');
        const driverViewDiv = document.getElementById('driver-view');
        const adminViewDiv = document.getElementById('admin-view');
        const adminBusTableBody = document.getElementById('admin-bus-table-body');
        const adminPassengerTableBody = document.getElementById('admin-passenger-table-body');
        const editModal = document.getElementById('editModal');
        const editForm = document.getElementById('editForm');
        const editFieldsDiv = document.getElementById('edit-fields');
        const modalTitle = document.getElementById('modal-title');
        const editItemIdInput = document.getElementById('edit-item-id');
        const editItemTypeInput = document.getElementById('edit-item-type');
        const tabDriver = document.getElementById('tab-driver');
        const tabAdmin = document.getElementById('tab-admin');
        const bulkPassengerListTextarea = document.getElementById('bulk-passenger-list');
        const bulkAddFeedbackDiv = document.getElementById('bulk-add-feedback');
        const bulkAddPanel = document.getElementById('bulk-add-panel');
        const toggleBulkAddBtn = document.getElementById('toggle-bulk-add-btn');


        // --- View Switching ---
        function switchView(viewName) {
            bulkAddFeedbackDiv.innerHTML = ''; // Clear feedback
            bulkAddPanel.classList.add('hidden'); // Ensure panel is hidden on view switch
            toggleBulkAddBtn.textContent = 'Show Bulk Add'; // Reset button text

            if (viewName === 'admin') {
                driverViewDiv.classList.add('hidden');
                adminViewDiv.classList.remove('hidden');
                tabDriver.classList.remove('tab-active', 'text-indigo-600');
                tabDriver.classList.add('text-gray-500', 'hover:text-gray-700');
                tabAdmin.classList.add('tab-active', 'text-indigo-600');
                tabAdmin.classList.remove('text-gray-500', 'hover:text-gray-700');
                displayAdminBuses();
                displayAdminPassengers();
            } else { // 'driver' view
                driverViewDiv.classList.remove('hidden');
                adminViewDiv.classList.add('hidden');
                tabAdmin.classList.remove('tab-active', 'text-indigo-600');
                tabAdmin.classList.add('text-gray-500', 'hover:text-gray-700');
                tabDriver.classList.add('tab-active', 'text-indigo-600');
                tabDriver.classList.remove('text-gray-500', 'hover:text-gray-700');
                populateBusSelector();
                busSelect.dispatchEvent(new Event('change'));
            }
        }

        // --- Toggle Bulk Add Panel Function ---
        function toggleBulkAddPanel() {
            const isHidden = bulkAddPanel.classList.contains('hidden');
            if (isHidden) {
                bulkAddPanel.classList.remove('hidden');
                toggleBulkAddBtn.textContent = 'Hide Bulk Add';
            } else {
                bulkAddPanel.classList.add('hidden');
                toggleBulkAddBtn.textContent = 'Show Bulk Add';
                bulkAddFeedbackDiv.innerHTML = ''; // Clear feedback when hiding
            }
        }

        // --- Driver View Functions ---
        function populateBusSelector() {
            const currentVal = busSelect.value;
            busSelect.innerHTML = '<option value="" disabled selected>-- Select a Bus --</option>';
            buses.forEach(bus => {
                const option = document.createElement('option');
                option.value = bus.id;
                option.textContent = bus.identifier;
                busSelect.appendChild(option);
            });
             if (buses.some(b => b.id == currentVal)) {
                busSelect.value = currentVal;
            } else {
                 passengerListDiv.innerHTML = '<p class="text-gray-500 text-center">Select a bus to see the passenger list.</p>';
                 updateSummary([]);
            }
        }
        function updateSummary(currentBusPassengers) {
            const total = currentBusPassengers.length;
            const checkedIn = currentBusPassengers.filter(p => p.status === 'checked-in').length;
            const pending = total - checkedIn;
            totalPassengersSpan.textContent = total;
            checkedInCountSpan.textContent = checkedIn;
            pendingCountSpan.textContent = pending;
        }
        function displayPassengers(selectedBusId) {
            passengerListDiv.innerHTML = '';
            // Filter passengers ensuring assignedBusId is compared correctly (as number)
            const currentBusPassengers = passengers.filter(p => p.assignedBusId === selectedBusId);

            if (currentBusPassengers.length === 0) {
                passengerListDiv.innerHTML = '<p class="text-gray-500 text-center">No passengers assigned to this bus.</p>';
                updateSummary([]);
                return;
            }

            currentBusPassengers.forEach(passenger => {
                const passengerDiv = document.createElement('div');
                passengerDiv.className = `passenger-item flex items-center justify-between p-3 border border-gray-200 rounded-md ${passenger.status === 'checked-in' ? 'checked-in' : 'bg-white'}`;
                passengerDiv.dataset.passengerId = passenger.id;
                const passengerNameSpan = document.createElement('span');
                passengerNameSpan.className = "text-gray-800 font-medium";
                passengerNameSpan.textContent = passenger.name;
                const actionButton = document.createElement('button');
                actionButton.className = 'px-3 py-1 text-xs font-medium text-white rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50';
                if (passenger.status === 'pending') {
                    actionButton.textContent = 'Check In';
                    actionButton.classList.add('bg-indigo-600', 'hover:bg-indigo-700');
                    actionButton.addEventListener('click', () => handleCheckIn(passenger.id, selectedBusId));
                } else {
                    actionButton.textContent = 'Undo';
                    actionButton.classList.add('undo-button');
                    actionButton.addEventListener('click', () => handleUndoCheckIn(passenger.id, selectedBusId));
                }
                passengerDiv.appendChild(passengerNameSpan);
                passengerDiv.appendChild(actionButton);
                passengerListDiv.appendChild(passengerDiv);
            });
            updateSummary(currentBusPassengers);
        }
        function handleCheckIn(passengerId, currentBusId) {
            const passengerIndex = passengers.findIndex(p => p.id === passengerId);
            if (passengerIndex !== -1) {
                passengers[passengerIndex].status = 'checked-in';
                displayPassengers(currentBusId);
            }
        }
        function handleUndoCheckIn(passengerId, currentBusId) {
            const passengerIndex = passengers.findIndex(p => p.id === passengerId);
            if (passengerIndex !== -1) {
                passengers[passengerIndex].status = 'pending';
                displayPassengers(currentBusId);
            }
        }

        // --- Admin View Functions ---
        function displayAdminBuses() {
            adminBusTableBody.innerHTML = '';
            buses.forEach(bus => {
                const row = adminBusTableBody.insertRow();
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${bus.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${bus.identifier}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${bus.capacity}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onclick="openEditModal('bus', ${bus.id})" class="text-indigo-600 hover:text-indigo-900">Edit</button>
                    </td>
                `;
            });
        }

        function displayAdminPassengers() {
            adminPassengerTableBody.innerHTML = '';
            passengers.forEach(passenger => {
                const row = adminPassengerTableBody.insertRow();
                // Added Delete button with correct onclick handler
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${passenger.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${passenger.name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${passenger.gender || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${passenger.mobileNumber || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${passenger.assignedBusId || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${passenger.status}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onclick="openEditModal('passenger', ${passenger.id})" class="text-indigo-600 hover:text-indigo-900">Edit</button>
                        <button onclick="handleDeletePassenger(${passenger.id})" class="text-red-600 hover:text-red-900 ml-4">Delete</button>
                    </td>
                `;
            });
        }

        // --- CORRECTED: Delete Passenger Function ---
        function handleDeletePassenger(passengerId) {
            // Confirmation dialog
            if (confirm(`Are you sure you want to delete passenger ID ${passengerId}? This action cannot be undone.`)) {
                const passengerIndex = passengers.findIndex(p => p.id === passengerId);

                // Add console log for debugging
                console.log(`Attempting to delete passenger ID: ${passengerId}, Index found: ${passengerIndex}`);

                if (passengerIndex !== -1) {
                    passengers.splice(passengerIndex, 1); // Remove passenger from array
                    console.log(`Successfully deleted passenger ID ${passengerId} from array.`);
                    displayAdminPassengers(); // Refresh the admin table

                    // Also refresh the driver view passenger list if a bus is currently selected
                    const selectedBusId = parseInt(busSelect.value, 10);
                    if (!isNaN(selectedBusId)) {
                         console.log(`Refreshing driver view for bus ID: ${selectedBusId}`);
                         displayPassengers(selectedBusId);
                    }

                } else {
                    console.error(`Passenger ID ${passengerId} not found for deletion.`);
                    // Provide user feedback if needed, e.g., alert('Error: Passenger not found.');
                }
            } else {
                 console.log(`Deletion cancelled for passenger ID ${passengerId}.`);
            }
        }


        // --- Modal Functions ---
         function openEditModal(itemType, itemId) {
            editFieldsDiv.innerHTML = '';
            editItemIdInput.value = itemId;
            editItemTypeInput.value = itemType;
            if (itemType === 'bus') {
                const bus = buses.find(b => b.id === itemId);
                if (!bus) return;
                modalTitle.textContent = `Edit Bus (ID: ${bus.id})`;
                editFieldsDiv.innerHTML = `
                    <div><label for="edit-bus-identifier" class="block text-sm font-medium text-gray-700">Identifier/Route</label><input type="text" id="edit-bus-identifier" value="${bus.identifier}" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"></div>
                    <div><label for="edit-bus-capacity" class="block text-sm font-medium text-gray-700">Capacity</label><input type="number" id="edit-bus-capacity" value="${bus.capacity}" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"></div>
                `;
            } else if (itemType === 'passenger') {
                const passenger = passengers.find(p => p.id === itemId);
                if (!passenger) return;
                modalTitle.textContent = `Edit Passenger (ID: ${passenger.id})`;

                // --- ENHANCEMENT: Create Bus ID Dropdown ---
                let busOptionsHtml = '<option value="">-- Unassigned --</option>'; // Default unassigned option
                buses.forEach(bus => {
                    const selected = (bus.id === passenger.assignedBusId) ? 'selected' : '';
                    busOptionsHtml += `<option value="${bus.id}" ${selected}>${bus.identifier} (ID: ${bus.id})</option>`;
                });
                const busSelectHtml = `
                    <div>
                        <label for="edit-passenger-bus" class="block text-sm font-medium text-gray-700">Assigned Bus</label>
                        <select id="edit-passenger-bus" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            ${busOptionsHtml}
                        </select>
                    </div>`;
                // --- End Bus ID Dropdown ---

                // Simplified Gender options
                editFieldsDiv.innerHTML = `
                    <div><label for="edit-passenger-name" class="block text-sm font-medium text-gray-700">Name</label><input type="text" id="edit-passenger-name" value="${passenger.name}" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"></div>
                    <div>
                        <label for="edit-passenger-gender" class="block text-sm font-medium text-gray-700">Gender</label>
                        <select id="edit-passenger-gender" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                            <option value="Female" ${passenger.gender === 'Female' ? 'selected' : ''}>Female</option>
                            <option value="Male" ${passenger.gender === 'Male' ? 'selected' : ''}>Male</option>
                        </select>
                        <p class="text-xs text-gray-500 mt-1">Note: Other genders in data will default to Female/Male upon edit.</p>
                    </div>
                    <div><label for="edit-passenger-mobile" class="block text-sm font-medium text-gray-700">Mobile Number</label><input type="tel" id="edit-passenger-mobile" value="${passenger.mobileNumber || ''}" placeholder="e.g., 555-0101" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"></div>
                    ${busSelectHtml} <div><label for="edit-passenger-status" class="block text-sm font-medium text-gray-700">Status</label><select id="edit-passenger-status" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"><option value="pending" ${passenger.status === 'pending' ? 'selected' : ''}>Pending</option><option value="checked-in" ${passenger.status === 'checked-in' ? 'selected' : ''}>Checked-in</option></select></div>
                `;
            }
            editModal.style.display = 'block';
        }
        function closeEditModal() {
            editModal.style.display = 'none';
        }
        function handleSaveChanges(event) {
            event.preventDefault();
            const itemId = parseInt(editItemIdInput.value, 10);
            const itemType = editItemTypeInput.value;
            if (itemType === 'bus') {
                const busIndex = buses.findIndex(b => b.id === itemId);
                if (busIndex !== -1) {
                    buses[busIndex].identifier = document.getElementById('edit-bus-identifier').value;
                    buses[busIndex].capacity = parseInt(document.getElementById('edit-bus-capacity').value, 10) || 0;
                    displayAdminBuses();
                     // Refresh bus selector in driver view if bus details changed
                     populateBusSelector();
                }
            } else if (itemType === 'passenger') {
                const passengerIndex = passengers.findIndex(p => p.id === itemId);
                if (passengerIndex !== -1) {
                    passengers[passengerIndex].name = document.getElementById('edit-passenger-name').value;
                    passengers[passengerIndex].gender = document.getElementById('edit-passenger-gender').value;
                    passengers[passengerIndex].mobileNumber = document.getElementById('edit-passenger-mobile').value;
                    // Read value from the select dropdown for bus ID
                    passengers[passengerIndex].assignedBusId = parseInt(document.getElementById('edit-passenger-bus').value, 10) || null; // Use null if '-- Unassigned --' is selected
                    passengers[passengerIndex].status = document.getElementById('edit-passenger-status').value;
                    displayAdminPassengers();
                     // Refresh driver view if passenger's bus assignment or status changed
                     const selectedBusId = parseInt(busSelect.value, 10);
                     if (!isNaN(selectedBusId)) {
                         displayPassengers(selectedBusId);
                     }
                }
            }
            closeEditModal();
        }

        // --- Bulk Add Passenger Function ---
        function handleBulkAddPassengers() {
            const list = bulkPassengerListTextarea.value.trim();
            const lines = list.split('\n');
            let addedCount = 0;
            let errorCount = 0;
            let errors = [];
            let maxId = passengers.reduce((max, p) => Math.max(max, p.id), 0);

            lines.forEach((line, index) => {
                line = line.trim();
                if (!line) return;
                const values = line.split(',');
                if (values.length !== 4) {
                    errors.push(`Line ${index + 1}: Incorrect format (expected 4 values separated by commas).`); errorCount++; return;
                }
                const [name, gender, mobileNumber, assignedBusIdStr] = values.map(v => v.trim());
                const assignedBusId = parseInt(assignedBusIdStr, 10);
                if (!name) { errors.push(`Line ${index + 1}: Name cannot be empty.`); errorCount++; return; }
                if (isNaN(assignedBusId)) { errors.push(`Line ${index + 1}: Assigned Bus ID must be a number.`); errorCount++; return; }
                if (!buses.some(bus => bus.id === assignedBusId)) { errors.push(`Line ${index + 1}: Bus ID ${assignedBusId} not found.`); errorCount++; return; }
                maxId++;
                const newPassenger = { id: maxId, name: name, gender: gender || 'Prefer not to say', mobileNumber: mobileNumber || null, status: 'pending', assignedBusId: assignedBusId };
                passengers.push(newPassenger);
                addedCount++;
            });

            bulkAddFeedbackDiv.innerHTML = '';
            if (addedCount > 0) {
                 const successMsg = document.createElement('div');
                 successMsg.className = 'feedback-message feedback-success';
                 successMsg.textContent = `Successfully added ${addedCount} passengers.`;
                 bulkAddFeedbackDiv.appendChild(successMsg);
            }
             if (errorCount > 0) {
                 const errorMsg = document.createElement('div');
                 errorMsg.className = 'feedback-message feedback-error';
                 errorMsg.innerHTML = `Skipped ${errorCount} lines due to errors:<ul>${errors.map(e => `<li class="ml-4 text-xs">${e}</li>`).join('')}</ul>`;
                 bulkAddFeedbackDiv.appendChild(errorMsg);
            }
             if (addedCount === 0 && errorCount === 0 && list.length > 0) {
                 const noDataMsg = document.createElement('div');
                 noDataMsg.className = 'feedback-message feedback-error';
                 noDataMsg.textContent = 'No valid passenger data found in the list.';
                 bulkAddFeedbackDiv.appendChild(noDataMsg);
            }

            if (addedCount > 0) {
                bulkPassengerListTextarea.value = '';
                displayAdminPassengers();
                 // Refresh driver view if passengers were added and a bus is selected
                 const selectedBusId = parseInt(busSelect.value, 10);
                 if (!isNaN(selectedBusId)) {
                     displayPassengers(selectedBusId);
                 }
            }
        }

        // --- Event Listeners ---
        busSelect.addEventListener('change', (event) => {
            const selectedBusId = parseInt(event.target.value, 10);
            if (!isNaN(selectedBusId)) { displayPassengers(selectedBusId); }
            else { passengerListDiv.innerHTML = '<p class="text-gray-500 text-center">Select a bus to see the passenger list.</p>'; updateSummary([]); }
        });
        editForm.addEventListener('submit', handleSaveChanges);
        window.onclick = function(event) { if (event.target == editModal) { closeEditModal(); } }

        // --- Initial Load ---
        populateBusSelector();
        updateSummary([]);
        switchView('driver'); // Set initial view

    </script>

</body>
</html>
